{
	"info": {
		"_postman_id": "9e252121-1517-48bc-82b6-4e519e986562",
		"name": "My API Testing Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40276519"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const data = pm.response.json();\r",
									"    if (data.accessToken && data.refreshToken ) {\r",
									"        pm.environment.set(\"access_token\", data.accessToken);\r",
									"        pm.environment.set(\"refresh_token\", data.refreshToken);\r",
									"        pm.environment.set(\"user_id\", data.id);\r",
									"        console.log(\"‚úÖ access_token,  refresh_token –∏ user_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\");\r",
									"    } \r",
									"    else {\r",
									"        console.warn(\"‚ö†Ô∏è–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ login\");\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –¢–µ—Å—Ç—ã –¥–ª—è login –∑–∞–ø—Ä–æ—Å–∞\r",
									"pm.test(\"Login returns auth token\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('accessToken');\r",
									"    pm.expect(response).to.have.property('refreshToken');\r",
									"});\r",
									"\r",
									"pm.test(\"Set environment variables\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.environment.set(\"access_token\", response.accessToken);\r",
									"    pm.environment.set(\"refresh_token\", response.refreshToken);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"aziz123@gmail.com\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const data = pm.response.json();\r",
									"    if (data.accessToken) {\r",
									"        pm.environment.set(\"access_token\", data.accessToken);\r",
									"        console.log(\"üîÑ accessToken –æ–±–Ω–æ–≤–ª—ë–Ω\");\r",
									"    } \r",
									"    else {\r",
									"        console.warn(\"–ù–æ–≤—ã–π accessToken –Ω–µ –ø–æ–ª—É—á–µ–Ω\");\r",
									"    }\r",
									"} \r",
									"else if (pm.response.code === 401 || pm.response.code === 403) {\r",
									"    console.error(\"refresh_token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è\");\r",
									"}\r",
									"\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –æ–±—ä–µ–∫—Ç–∞\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('accessToken');\r",
									"    pm.expect(response).to.have.property('refreshToken');\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refresh_token}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    pm.environment.unset(\"accessToken\");\r",
									"    pm.environment.unset(\"refreshToken\");\r",
									"    console.log(\"üëã –¢–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/auth/logout",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –º–∞—Å—Å–∏–≤–∞\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response)).to.be.true;\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –æ–±—ä–µ–∫—Ç–∞\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('name');\r",
									"    pm.expect(response).to.have.property('email');\r",
									"    pm.expect(response).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});\r",
									"\r",
									"// –°—Ö–µ–º–∞ –¥–ª—è User\r",
									"const userSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\"type\": \"number\"},\r",
									"        \"name\": {\"type\": \"string\"},\r",
									"        \"email\": {\"type\": \"string\", \"format\": \"email\"},\r",
									"        \"createdAt\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"email\", \"createdAt\"]\r",
									"};\r",
									"\r",
									"// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏\r",
									"pm.test(\"Response matches JSON schema\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, userSchema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"name\": \"Aziz\",\r\n    \"email\": \"aziz123@gmail.com\",\r\n    \"password\": \"12345\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –æ–±—ä–µ–∫—Ç–∞\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('name');\r",
									"    pm.expect(response).to.have.property('email');\r",
									"    pm.expect(response).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});\r",
									"\r",
									"// –ü—Ä–∏–º–µ—Ä —Å—Ö–µ–º—ã –¥–ª—è User\r",
									"const userSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\"type\": \"number\"},\r",
									"        \"name\": {\"type\": \"string\"},\r",
									"        \"email\": {\"type\": \"string\", \"format\": \"email\"},\r",
									"        \"createdAt\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"email\", \"createdAt\"]\r",
									"};\r",
									"\r",
									"// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏\r",
									"pm.test(\"Response matches JSON schema\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, userSchema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/41/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"41",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products (No Filter)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –º–∞—Å—Å–∏–≤–∞\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response)).to.be.true;\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –æ–±—ä–µ–∫—Ç–∞\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('name');\r",
									"    pm.expect(response).to.have.property('price');\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"toy mouse\",\r\n    \"price\": 2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –æ–±—ä–µ–∫—Ç–∞\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('name');\r",
									"    pm.expect(response).to.have.property('price');\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Orange Keyboard\",\r\n    \"price\": 560.1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/3/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"3",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products (Max Price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –º–∞—Å—Å–∏–≤–∞\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response)).to.be.true;\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?maxPrice=500",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "maxPrice",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products (Min Price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –º–∞—Å—Å–∏–≤–∞\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response)).to.be.true;\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?minPrice=1000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "minPrice",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products (Min and Max)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –º–∞—Å—Å–∏–≤–∞\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response)).to.be.true;\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?minPrice=1500&maxPrice=1600",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "minPrice",
									"value": "1500"
								},
								{
									"key": "maxPrice",
									"value": "1600"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"id\": 1\r\n        },\r\n        {\r\n            \"id\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}/orders/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"orders",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Content-Type\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// –î–ª—è –º–∞—Å—Å–∏–≤–∞\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response)).to.be.true;\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π\r",
									"pm.test(\"Response time performance\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(200); // P90\r",
									"    pm.expect(responseTime).to.be.below(500); // P95\r",
									"    pm.expect(responseTime).to.be.below(1000); // P99\r",
									"});\r",
									"\r",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers\r",
									"pm.test(\"Security headers are present\", function () {\r",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');\r",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');\r",
									"    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chained requests",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User created successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"user_id\", response.id);\r",
									"pm.environment.set(\"access_token\", response.accessToken);\r",
									"pm.environment.set(\"refresh_token\", response.refreshToken);\r",
									"\r",
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.accessToken).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User fetched successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"user_id\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.environment.set(\"name\", response.name);\r",
									"\r",
									"pm.test(\"User updated successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Updated {{name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const updatedName = pm.environment.get(\"name\");\r",
									"\r",
									"pm.test(\"User name updated correctly\", function () {\r",
									"    pm.expect(response.name).to.eql(updatedName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"user_id\", \"\");\r",
									"    pm.environment.set(\"name\", \"\");\r",
									"    pm.environment.set(\"email\", \"\");\r",
									"    pm.environment.set(\"password\", \"\");\r",
									"    pm.environment.set(\"access_token\", \"\");\r",
									"    pm.environment.set(\"refresh_token\", \"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User no longer exists\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞\r",
					"const requestUrl = pm.request.url.toString();\r",
					"const excludedEndpoints = [\r",
					"    \"/api/auth/login\",\r",
					"    \"/api/auth/register\",\r",
					"    \"/api/auth/refresh\",\r",
					"    \"/api/auth/logout\"\r",
					"];\r",
					"\r",
					"\r",
					"const accessToken = pm.environment.get(\"access_token\");\r",
					"const refreshToken = pm.environment.get(\"refresh_token\");\r",
					"\r",
					"const isAuthExcluded = excludedEndpoints.some(e => requestUrl.includes(e));\r",
					"\r",
					"if (requestUrl.includes(\"/api/auth/refresh\")) {\r",
					"    if (refreshToken) {\r",
					"        pm.request.body.raw = JSON.stringify({ refreshToken: refreshToken });\r",
					"    } \r",
					"    else {\r",
					"        console.warn(\"–ù–µ—Ç refreshToken, –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.\");\r",
					"    }\r",
					"}\r",
					"\r",
					"if (!isAuthExcluded) {\r",
					"    if (accessToken) {\r",
					"        pm.request.headers.upsert({\r",
					"            key: \"Authorization\",\r",
					"            value: \"Bearer \" + accessToken\r",
					"        });\r",
					"    }\r",
					"     else {\r",
					"        console.warn(\"accessToken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù—É–∂–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.\");\r",
					"    }\r",
					"}\r",
					"\r",
					"if (requestUrl.includes(\"/api/auth/logout\")) {\r",
					"    pm.request.headers.remove(\"Authorization\");\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "admin_email",
			"value": ""
		},
		{
			"key": "admin_password",
			"value": ""
		}
	]
}